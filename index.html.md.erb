---
title: MySQL for Pivotal Cloud Foundry
owner: MySQL
---

This is documentation for MySQL for [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF).

## <a id="product-snapshot"></a>Product Snapshot ##

Current MySQL for Pivotal Cloud Foundry Details
<div style="line-height: 1; padding-left: 3em">

- **Version**: 1.8.1
- **Release Date**: 2016-12-15
- **Software component versions**: MariaDB 10.1.18, Galera 25.3.17
- **Compatible Ops Manager Version(s)**: 1.8.x
- **Compatible Elastic Runtime Version(s)**: 1.8.x
- **vSphere support?** Yes
- **AWS support?** Yes
- **OpenStack support?** Yes
- **IPSec support?** Yes

</div>

## <a id="upgrading"></a>Upgrading to the Latest Version ##
Consider the following compatibility information before upgrading MySQL.

For more information, refer to the full [Product Version Matrix](../../compatibility-matrix.pdf).

<table border="1" class="nice">
	<tr>
		<th rowspan="2">Ops Manager Version</th>
		<th colspan="2">Supported Upgrades from Imported MySQL Installation</th>
	</tr>
	  <tr>
	  	<th>From</th>
	  	<th>To</th>
	  <tr>

	<tr>
	  <th rowspan="6">1.8.X</th>
		<td rowspan="3">1.6.1 - 1.6.20</td><td>Next 1.6.X release - 1.6.21</td>
		</tr>
		<tr>
		  <td>1.7.0 - 1.7.21</td>
		</tr>
		<tr>
			<td>1.8.1</td>
		</tr>
		<tr>
			<td rowspan=2>1.7.0 - 1.7.20</td><td>Next 1.7.X release - 1.7.21</td>
	                                   <tr><td>1.8.1</td></tr>
    <tr><td>1.8.0-e.1 - 1.8.0-e.15</td><td>1.8.1</td></tr>
	</tr>

</table>

## <a id="release-notes"></a>Release Notes ##

Consult the [Release Notes](release-notes.html) for information about changes between versions of this product.

## <a id="overview"></a> Overview ##

The MySQL for PCF product delivers a fully managed, "Database as a Service" to Cloud Foundry users. When installed, the tile deploys and maintains a single or three-node cluster running a recent release of [MariaDB](http://www.mariadb.org), SQL Proxies for super-fast failover, and Service Brokers for Cloud Foundry integration. We work hard to ship the service configured with sane defaults, following the principle of least surprise for a general-use relational database service.

When installed, Developers can attach a database to their applications in as little as two commands, `cf create-service` and `cf bind-service`. Connection credentials are automatically provided in the [standard manner](https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES). Developers can select from a menu of service plans options, which are configured by the platform operator.

Two configurations are supported:

<center>
<table>
  <tr><th></th><th>Single</th><th>Highly Available</th></tr>
  <tr><td>**MySQL**</td><td>1 node</td><td>3-node cluster</td></tr>
  <tr><td>**SQL Proxy**</td><td>1 node</td><td>2 nodes</td></tr>
  <tr><td>**Service Broker**</td><td>1 node</td><td>2 nodes</td></tr>
  <tr><td>High Availability</td><td>-</td><td>Yes</td></tr>
  <tr><td>Multi-AZ Support</td><td>-</td><td>Yes \*</td></tr>
  <tr><td>Rolling Upgrades</td><td>-</td><td>Yes</td></tr>
  <tr><td>Automated Backups</td><td>Yes</td><td>Yes</td></tr>
  <tr><td>Customizable Plans</td><td>Yes</td><td>Yes</td></tr>
  <tr><td>Customizable VM Instances</td><td>Yes</td><td>Yes</td></tr>
  <tr><td>Plan Migrations</td><td>Yes</td><td>Yes</td></tr>
  <tr><td>Encrypted Communication</td><td>Yes &#x271D;</td><td>Yes &#x271D;</td></tr>
  <tr><td>Encrypted Data at-rest</td><td>-</td><td>-</td></tr>
  <tr><td>Long-lived Canaries</td><td>-</td><td>Replication Canary</td></tr>
</table>
</center>

(\*) vSphere and AWS (1.8.0-edge.15 and later)<br>
(&#x271D;) Requires IPSEC BOSH plug-in

## <a id="limitations"></a>Limitations ##

When deployed in HA configuration, MySQL for PCF is deployed using multiple master nodes. In this configuration, there are some changes to be aware of that make accessing the service different than a traditional single MySQL database server.

- Single and three-node clusters are the only supported topologies. Ops Manager will allow the Operator to set the number of instances to other values, only one and three are advised. Please see the [note](cluster-behavior.html#even-number) in the Cluster Behavior document.
- Although two Proxy instances are deployed by default, there is no automation to direct clients from one to the other. See the note in the [Proxy](#proxy) section, as well as the entry in [Known Issues](known-issues.html).
- Only the InnoDB storage engine is supported; it is the default storage engine for new tables. Attempted use of other storage engines (including MyISAM) may result in data loss.
- All databases are managed by shared, multi-tenant server processes. Although data is securely isolated between tenants using unique credentials, application performance may be impacted by noisy neighbors.
- Round-trip latency between database nodes must be less than five seconds; if the latency is higher than this, nodes will become partitioned. If more than half of cluster nodes are partitioned, the cluster will lose quorum and become unusable until manually bootstrapped.
- See also the list of [Known Limitations](https://mariadb.com/kb/en/mariadb/mariadb-galera-cluster-known-limitations/) in MariaDB cluster.

## <a id="known-issues"></a>Known Issues ##

Consult the [Known Issues](known-issues.html) topic for information about issues in current releases of MySQL for PCF.

## <a id="planning"></a>Planning your Deployment ##

### <a id="network-layout"></a>Network Layout ##

MySQL for PCF supports deployment to multiple availability zones (AZs) on vSphere only. For other infrastructures, make sure to specify only one AZ.

To achieve best uptime, it is best to deploy a load balancer in front of the SQL Proxy nodes. Please see the note in the [proxy](#proxy) section below. When configuring this load balancer, increase the minimum idle timeout if possible, as many load balancers are tuned for short-lived connections unsuitable for long-running database queries. See the [known issue](known-issues.html#load-balancer-timeout) for more details.

Below is a list of services and the ports on which they are listening:

| Listening service | TCP Port |
| ---- | ---- |
| SQL server | 3306 |
| SQL server | 4567 |
| SQL server healthcheck | 9200 |
| SQL proxy | 3306 |
| SQL proxy http api | 8080 |
| SQL proxy http healthcheck | 1936 |
| Proxy healthcheck | 1936 |
| Service Broker | 8081 |
| NATS | 4222 |
| Backup server port | 8081 |

### <a id="application-service-groups"></a> Application Security Groups

You must create an
[Application Security Group](http://docs.pivotal.io/pivotalcf/adminguide/app-sec-groups.html) (ASG) for  MySQL for PCF in order for applications to access to the service. See [Creating Application Security Groups for MySQL](./app-security-groups.html) for instructions.

<p class="note"><strong>Note</strong>: The service will not be usable until an ASG is in place.</p>

### <a id="instance-capacity"></a>Instance Capacity ####

An operator can configure how many database instances can be provisioned (instance capacity) by configuring the amount of persistent disk allocated to the MySQL server nodes. The broker will  provision a requested database if there is sufficient unreserved persistent disk. This can be managed using the Persistent Disk field for the MySQL Server job in the Resource Config setting page in Operations Manager. Not all persistent disk will be available for instance capacity; about 2-3 GB is reserved for service operation.

In determining how much persistent disk to make available for databases, operators should also consider that MariaDB servers require sufficient CPU, RAM, and IOPS to promptly respond to client requests for all databases.

## <a id="installation"></a>Installation ##

1. Download the product file from [Pivotal Network](https://network.pivotal.io/products/p-mysql).

1. Navigate to the Ops Manager Installation Dashboard.

	<%= image_tag('available-products.png') %>

1. Click **Import a Product** to upload the product file to your Ops Manager installation.

	<%= image_tag('add-product.png') %>

1. Click **Add** next to the uploaded product description in the Available Products view to add this product to your staging area.

	<%= image_tag('config-mysql.png') %>

1. Click the newly added tile to review configurable [Settings](#settings).

	<%= image_tag('apply-changes.png') %>

1. Click **Apply Changes** to deploy the service.

## <a id="settings"></a>Settings ##

### <a id="service-plan"></a>Service Plans ###

Starting with version 1.8.0 of MySQL for PCF, operators can configure multiple service plans. To add or delete plans, follow the instructions below.

<p class="note"><strong>Note</strong>: If you are upgrading from an earlier version of MySQL for PCF, the upgrade process is not able to continue using the original name of the plan. Upgrading from a version of MySQL for PCF that offered only a single plan causes the plan to be renamed. Regardless of the name of the previous plan (e.g., "100mb-dev"), the plan will now be named <code>pre-existing-plan</code>. To retain the same plan name, edit the name before clicking <strong>Apply Changes</strong> to upgrade to MySQL for PCF v1.8.0.</p>

#### <a id="update-a-plan"></a> Update Existing Service Instances

You can update service instances using the cf CLI as follows:
	<pre class="terminal">cf update-service SERVICE\_INSTANCE -p NEW\_PLAN</pre>

The following rules apply when updating a service instance plan:

* Updating a service instance to a plan with a larger `max_storage_mb` is always supported.
* Updating a service instance to a plan with a smaller `max_storage_mb` is supported only if the current usage is less than the new value.
* The update command fails if the current usage is greater than the new value.
* Updating a service instance does not disrupt running application connections so long as the application uses fewer than the maximum number of connections allowed by the new plan.

#### <a id="adding-a-plan"></a>Add a Plan

1. Navigate to the Ops Manager Installation Dashboard and click **MySQL for Pivotal Cloud Foundry**.
1. Click **Service Plans**.
1. Click **Add** to add a new service plan. Click the small triangles to expand or collapse a plan's details.
	<%= image_tag('service-plan-config.png') %>
1. Complete the following fields:
	- **Service Plan name**: Plan names may include only lowercase letters, numbers, hyphens, and underscores. Developers use the name of the service plan to create service instances in Apps Manager and the cf CLI.
	  <p class="note"><strong>Note</strong>: PCF enforces plan name constraints only at deploy time. The form does not yet allow for real-time validation. If a plan name does not conform to the correct format, the tile fails to deploy after you click <strong>Apply Changes</strong>. The error appears in the <strong>Recent Install Logs</strong> dropdown in the following format:
	    <code>
	    Error 100: Error filling in template 'settings.yml.erb' for 'cf-mysql-broker-partition-20d9770a220f749796c2/0' (line 40: Plan name 'ONE HUNDRED MEGA BYTES!!!' must only contain lowercase letters, numbers, hyphen(-), or underscore(_).)
	    </code>
	  </p>
	- **Description**: The descriptive text that accompanies the plan name. Use this to provide context beyond what can be expressed by the plan name. For example, "general use, small footprint."
	- **Storage Quota**: The maximum amount, in megabytes, of storage allowed each instance of the Service Plan.
	- **Concurrent Connections Quota**: The maximum number of simultaneous database connections allowed to each instance of the Service Plan.
	- **Private**: By default, all plans are published to all organizations. Clicking **Not available by default** requires the operator to [publish plans manually](https://docs.pivotal.io/pivotalcf/services/access-control.html#enable-access) using `cf enable-service-access`.
	<p class="note"><strong>Note</strong>: If you have previously marked a plan as public, and later decide you would like this plan to be private, you need to run <code>cf disable-service-access</code> manually for each of your Organizations.</p>

<p class="note"><strong>Note</strong>: You cannot deploy MySQL for PCF with zero service plans. One plan, at the minimum, is required. If you want to deploy MySQL for PCF without offering any plans, mark the plan as private and do not enable access to any organizations.</p>

#### <a id="delete-a-plan"></a>Deleting a Plan
1. Navigate to the Ops Manager Installation Dashboard and click the **MySQL for Pivotal Cloud Foundry**.
1. Click **Service Plans**.
	<%= image_tag('delete-plan.png') %>
1. Click the corresponding trash can icon to delete a plan.
	<p class="note"><strong>Note</strong>: If you accidentally click the trash can, do not click <strong>Save</strong>. Instead, return to the Installation Dashboard and any accidental changes will be discarded. If you do click <strong>Save</strong>, do not click <strong>Apply Changes</strong> on the Installation Dashboard. Instead, click <strong>Revert</strong> to discard any accidental changes.</p>
1. Click **Save**.
1. Click **Apply Changes** from the Installation Dashboard.

If no service instances of the deleted plan exist, the plan will disappear from the Services Marketplace.

If service instances of the deleted plan exist, they will continue to be maintained, but developers cannot create new instances. The service plan will continue to display in the Services Marketplace, marked as "inactive." Once all service plan instances are deleted, the operator can remove the plan from the Services Marketplace by following these steps:

1. Run `bosh deployments` to find the full name of the MySQL for PCF deployment. For example, `p-mysql-180290d67d5441ebf3c5`.
1. Run `bosh deployment P-MYSQL-DEPLOYMENT-NAME`. For example, `bosh deployment p-mysql-180290d67d5441ebf3c5`.
1. Run `bosh run errand broker-registrar`.

#### Service Plans before MySQL for PCF v1.8.0

In versions 1.7 and earlier, the product is only capable of offering one service plan at a time.

A single service plan enforces quotas of 100 megabytes of storage per database and 40 concurrent connections per user by default. Users of Ops Manager can configure these plan quotas. Changes to quotas will apply to all existing database instances as well as new instances. In calculating storage utilization, indexes are included along with raw tabular data.

The name of the plan is **100mb-dev** by default and is automatically updated if the storage quota is modified. Thus, if the storage quota is changed to 1024 megabytes, the new default plan name will be **1024mb-dev**.

Provisioning a service instance from this plan creates a MySQL database on a multi-tenant server, suitable for development workloads. Binding applications to the instance creates unique credentials for each application to access the database.

<p class="note"><strong>Note</strong>: After changing a plan's definition, all instances of the plan must be updated. For each plan, either the operator or the user must run <code>cf update-service SERVICE_INSTANCE -p NEW_PLAN_NAME</code> on the command line.</p>

<p class="note"><strong>Note</strong>: Changing a plan's definition does not work properly in versions of MySQL for PCF 1.6.3 and earlier. See the entry in <a href="known-issues.html">Known Issues</a> for the recommended workaround.</p>

### <a id="options_and_features"></a>Options and Features ###

In the `Advanced Options` pane, you can change the configuration of the following features:

- Disable Reverse DNS lookups

    This feature is enabled by default, and improves performance. Un-checking this option causes the MySQL servers to perform a reverse DNS lookup on each new connection. It is only necessary when restricting access by hostname, which is not required in typical MySQL for PCF installations.

- Read-Only User Password

    Activates a special user, `roadmin`, a read-only administrator. Supply a special password, to be used only by administrators who require the ability to view all of the data maintained by the MySQL for PCF installation. Leaving the field blank de-activates the read-only user.

- The Replication Canary, see the [monitoring documentation](monitoring-mysql.html#repcanary).
- The Interruptor, see the [monitoring documentation](monitoring-mysql.html#interruptor).
- Quota Enforcer Frequency

    By default, the Quota Enforcer polls for violators and reformers every 30 seconds. This setting, in seconds, changes how long the quota enforcer pauses between checks. If you wish to reduce the small amount of load caused by the Quota Enforcer's polling, you may increase this time period. Be aware, however, that increasing the duration may make it possible for applications to write more data than their pre-determined limit allows.
- MySQL Start Timeout

    The minimum amount of time necessary for the MySQL process to start, in seconds. When restarting the MySQL server processes, there are conditions under which the process takes longer than expected to appear as running. This can cause parts of the system automation to assume that the process has failed to start properly, and will appear as failing in OpsManager and BOSH output. Depending on the data stored by the database, and the time represented in logs, it may be necessary to increase this beyond the default of 60 seconds.
- Replication Debug logging

    By default, the MySQL service will log events related to replication errors. Only turn off this option if error logging is causing undue strain on your logging systems.

- Server Activity Logging

    The MySQL service includes the [MariaDB Audit plugin](https://mariadb.com/kb/en/mariadb/about-the-mariadb-audit-plugin/). You can disable this plugin, or configure which [events](https://mariadb.com/kb/en/mariadb/about-the-mariadb-audit-plugin/#logging-events) are recorded. The log can be found at `/var/vcap/store/mysql_audit_logs/mysql_server_audit.log` on each VM. When enabled, the file is rotated every 100 megabytes, and 30 of the most recent files are retained.

    <p class="note"><strong>Note</strong>: Due to the sensitive nature of these logs, they are not transmitted to the syslog server.</p>

### <a id="proxy"></a>Proxy ###

The proxy tier is responsible for routing connections from applications to healthy MariaDB cluster nodes, even in the event of node failure.

Applications are provided with a hostname or IP address to reach a database managed by the service. For more information, see [Application Binding](http://docs.pivotal.io/pivotalcf/devguide/services/index.html#application-binding). By default, the MySQL service will provide bound applications with the IP of the first instance in the proxy tier. Even if additional proxy instances are deployed, client connections will not be routed through them. This means the first proxy instance is a single point of failure.

<p class="note"><strong>Note</strong> In order to eliminate the first proxy instance as a single point of failure, operators must configure a load balancer to route client connections to all proxy IPs, and configure the MySQL service to give bound applications a hostname or IP address that resolves to the load balancer.</p>

#### Configuring a Load Balancer

In older versions of the product, applications were given the IP of the single MySQL server in bind credentials. When upgrading to v1.5.0, existing applications will continue to function, but, to take advantage of high availability features, they must be rebound to receive either the IP of the first proxy instance or the IP/hostname of a load balancer.

In order to configure a load balancer with the IPs of the proxy tier before v1.5.0 is deployed and prevent applications from obtaining the IP of the first proxy instance, the product enables an operator to configure the IPs that will be assigned to proxy instances. The following instructions applies to the **Proxy** settings page for the MySQL product in Operation Manager.

- In the **Proxy IPs** field, enter a list of IP addresses that should be assigned to the proxy instances. These IP addresses must be in the CIDR range configured in the Director tile and not be currently allocated to another VM. Look at the **Status** pages of other tiles to see what IP addresses are in use.

- In the **Binding Credentials Hostname** field, enter the hostname or IP address that should be given to bound applications for connecting to databases managed by the service. This hostname or IP address should resolve to your load balancer and be considered long-lived. When this field is modified, applications must be rebound to receive updated credentials.

Configure your load balancer to route connections for a hostname or IP to the proxy IPs. As proxy instances are not synchronized, we recommend configuring your load balancer to send all traffic to one proxy instance at a time until it fails, then failover to another proxy instance. For details, see the known issue on [proxy behavior](known-issues.html#proxy-sync). Additionally, increase the idle timeout of your load balancer to accomodate long running query times. See the known issue on [load balancer timeouts](known-issues.html#load-balancer-timeout) for more information.

**Important**: To configure your load balancer with a healthcheck or monitor, use TCP against port **1936**. Unauthenticated healthchecks against port 3306 will cause the service to become unavailable, and will require manual intervention to fix.

#### Adding a Load Balancer after an Initial Deploy

If v1.5.0 is initially deployed without a load balancer and without proxy IPs configured, a load balancer can be setup later to remove the proxy as a single point of failure. However, there are several implications to consider:

- Applications will have to be rebound to receive the hostname or IP that resolves to the load balancer. To rebind: unbind your application from the service instance, bind it again, then restage your application. For more information see [Managing Service Instances with the CLI](http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html). In order to avoid unnecessary rebinding, we recommend configuring a load balancer before deploying v1.5.0.
- Instead of configuring the proxy IPs in Operations manager, use the IPs that were dynamically assigned by looking at the **Status** page. Configuration of proxy IPs after the product is deployed with dynamically assigned IPs is not well supported; see [Known Issues](#known-issues).

### <a id="lifecycle-errands"></a>Lifecycle Errands ###

Two lifecycle errands are run by default: the **broker registrar** and the **smoke test**. The broker registrar errand registers the broker with the Cloud Controller and makes the service plan public. The smoke test errand runs basic tests to validate that service instances can be created and deleted, and that applications pushed to Elastic Runtime can be bound and write to MySQL service instances. Both errands can be turned on or off on the **Lifecycle Errands** page under the **Settings** tab.

<p class="note"><strong>Note</strong>: You might also notice a <b>broker-deregistrar</b> errand. <b>Do not run this errand unless instructed to do so by Support.</b> Broker-deregistrar is a part of the automation used by Ops Manager while deleting a tile. Running this errand under any other circumstance will delete user data.</p>


## <a id="provision-and-bind"></a>Provisioning and Binding via Cloud Foundry ##

As part of installation the product is automatically registered with [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) Elastic Runtime (see [Lifecycle Errands](#lifecycle-errands)). On successful installation, the MySQL service is available to application developers in the Services Marketplace, via the web-based Developer Console or `cf marketplace`. Developers can then provision instances of the service and bind them to their applications:

<pre class="terminal">
$ cf create-service p-mysql 100mb-dev mydb
$ cf bind-service myapp mydb
$ cf restart myapp
</pre>

For more information about the use of services, see the [Services Overview](http://docs.pivotal.io/pivotalcf/devguide/services/).

## <a id="example-app"></a>Example Application ##

To help application developers get started with MySQL for PCF, we have provided an example application, which can be [downloaded here][example-app]. Instructions can be found in the included README.

[example-app]:mysql-example-app.tgz

## <a id="dashboard"></a>Service Instance Dashboard ##

Cloud Foundry users can access a dashboard for each MySQL service instances via SSO from Apps Manager. The dashboard displays current storage utilization of the database and the plan quota for storage. On the Space page in Apps Manager, users with the Space Developer role will find a **Manage** link next to the instance. Clicking this link will log users into the service dashboard via SSO.

Additionally, the dashboard URL can be discovered via the CLI, using `cf service [instance name]`. For example:

<pre class="terminal">
$ cf service acceptDB

Service instance: acceptDB
Service: p-mysql
Plan: 100mb-dev
Description: MySQL service for application development and testing
Documentation url:
Dashboard: https://p-mysql.sys.acceptance.cf-app.example.com/manage/instances/ddfa6842-b308-4983-a544-50b3d1fb62f0
</pre>

In this example, the URL to the instance dashboard is `https://p-mysql.sys.acceptance.cf-app.example.com/manage/instances/ddfa6842-b308-4983-a544-50b3d1fb62f0`

## <a id="proxy-dashboard"></a>Proxy Dashboard ##

The service provides a dashboard where administrators can observe health and metrics for each instance in the proxy tier. Metrics include the number of client connections routed to each backend database cluster node.

The dashboard for each proxy instance can be found at `http://proxy-<job index>-p-mysql.<system-domain>`.

The job index starts at 0 so if you have two proxy instances deployed and your system-domain is `example.com`, dashboards would be accessible at `http://proxy-0-p-mysql.example.com` and `http://proxy-1-p-mysql.example.com`.

Basic auth credentials are required to access the dashboard. These can be found in the **Credentials** tab of the MySQL product in Ops Manager.

For more information about SwitchBoard, read the [proxy documentation](proxy.html)

## <a id="SeeAlso"></a>See Also##

  * [Cluster Configuration](cluster-config.html)
  * [Backing Up MySQL](backup.html)<br>
    **Note**: For information about backing up your PCF installation, refer to [Backing Up and Restoring Pivotal Cloud Foundry](http://docs.pivotal.io/pivotalcf/customizing/backup-restore/index.html).
  * [Determining Cluster State](cluster-state.html)
  * [Cluster Scaling, Node Failure, and Quorum](cluster-behavior.html)
  * [Bootstrapping a Cluster](bootstrapping.html)
  * [Scaling Down MySQL](scaling-down.html)
